{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/victo/OneDrive/Escritorio/TFG/TFG-C\\xF3digo/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.baseUrl;\n  }\n\n  get auth() {\n    return { ...this._auth\n    };\n  }\n\n  get usuario() {\n    return { ...this._usuario\n    };\n  }\n\n  subirImagen(imagen) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsArrayBuffer(imagen);\n\n        reader.onloadend = () => {\n          const buffer = reader.result;\n          const imagen_array = Array.from(new Uint8Array(buffer));\n          const imagen_base64 = btoa(String.fromCharCode(...imagen_array));\n          const url = `${_this.baseUrl}/subir-imagen`;\n          const body = {\n            imagen: imagen_base64\n          };\n\n          _this.http.post(url, body).toPromise().then(response => resolve(response)).catch(error => reject(error));\n        };\n\n        reader.onerror = error => {\n          reject(error);\n        };\n      });\n    })();\n  }\n\n  registraUsuario(datosPersonales, inicioSesion) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      // TODO: Definir correctamente los datos a enviar, comprobar modelo Usuario en bd\n      let idImagen;\n      yield _this2.subirImagen(datosPersonales.controls['fotografia'].value._files[0]).then(resp => idImagen = resp.idImagen);\n      let body = {\n        nombre: datosPersonales.controls['nombre'].value,\n        email: inicioSesion.controls['email'].value,\n        password: inicioSesion.controls['password'].value,\n        listaRestaurantesFavoritos: [],\n        fotografia: idImagen,\n        listaOpiniones: [],\n        fechaNacimiento: datosPersonales.controls['fechaNacimiento'].value,\n        google: false\n      };\n      console.log(body);\n      return _this2.http.post(`${_this2.baseUrl}/nuevo-usuario`, body);\n    })();\n  }\n\n  verificaAutenticacion() {\n    if (!localStorage.getItem('token')) {\n      return of(false); // Creamos el observable del false\n    }\n\n    return this.http.get(`${this.baseUrl}/login`).pipe(map(auth => {\n      this._auth = auth;\n      return true;\n    }));\n  }\n\n  login(email, password) {\n    const body = {\n      email,\n      password\n    };\n    return this.http.post(`${this.baseUrl}/login`, body).pipe(tap(resp => {\n      if (resp.ok) {\n        localStorage.setItem('token', resp.token);\n        this._usuario = {\n          nombre: resp.nombre,\n          uid: resp.uid,\n          email: resp.email\n        };\n      }\n    }), map(resp => resp.ok));\n  }\n\n  logOut() {\n    localStorage.removeItem('token');\n    this._auth = undefined;\n  }\n\n  validarToken() {\n    const url = `${this.baseUrl}/auth/renovar`;\n    const headers = new HttpHeaders().set('x-token', localStorage.getItem('token') || '');\n    return this.http.get(url, {\n      headers\n    }).pipe(map(resp => {\n      localStorage.setItem('token', resp.token);\n      this._usuario = {\n        nombre: resp.nombre,\n        uid: resp.uid,\n        email: resp.email\n      };\n      return resp.ok;\n    }), catchError(err => of(false)));\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAAA,SAAqBA,WAArB,QAAwC,sBAAxC;AAGA,SAAqBC,EAArB,QAA+B,MAA/B;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,QAAqC,gBAArC;AACA,SAASC,WAAT,QAA4B,8BAA5B;;;AAMA,OAAM,MAAOC,WAAP,CAAkB;EAKtBC,YAAoBC,IAApB,EAAoC;IAAhB;IAJZ,eAAkBH,WAAW,CAACI,OAA9B;EAIgC;;EAEhC,IAAJC,IAAI;IACN,OAAO,EAAE,GAAG,KAAKC;IAAV,CAAP;EACD;;EAEU,IAAPC,OAAO;IACT,OAAO,EAAE,GAAG,KAAKC;IAAV,CAAP;EACD;;EAEKC,WAAW,CAACC,MAAD,EAAa;IAAA;;IAAA;MAC5B,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;QACrC,MAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;QACAD,MAAM,CAACE,iBAAP,CAAyBN,MAAzB;;QACAI,MAAM,CAACG,SAAP,GAAmB,MAAK;UACtB,MAAMC,MAAM,GAAGJ,MAAM,CAACK,MAAtB;UACA,MAAMC,YAAY,GAAGC,KAAK,CAACC,IAAN,CAAW,IAAIC,UAAJ,CAAeL,MAAf,CAAX,CAArB;UACA,MAAMM,aAAa,GAAGC,IAAI,CAACC,MAAM,CAACC,YAAP,CAAoB,GAAGP,YAAvB,CAAD,CAA1B;UACA,MAAMQ,GAAG,GAAG,GAAG,KAAI,CAACxB,OAAO,eAA3B;UACA,MAAMyB,IAAI,GAAG;YAAEnB,MAAM,EAAEc;UAAV,CAAb;;UACA,KAAI,CAACrB,IAAL,CACG2B,IADH,CACQF,GADR,EACaC,IADb,EAEGE,SAFH,GAGGC,IAHH,CAGSC,QAAD,IAAcrB,OAAO,CAACqB,QAAD,CAH7B,EAIGC,KAJH,CAIUC,KAAD,IAAWtB,MAAM,CAACsB,KAAD,CAJ1B;QAKD,CAXD;;QAYArB,MAAM,CAACsB,OAAP,GAAkBD,KAAD,IAAU;UACzBtB,MAAM,CAACsB,KAAD,CAAN;QACD,CAFD;MAGD,CAlBM,CAAP;IAD4B;EAoB7B;;EACKE,eAAe,CAACC,eAAD,EAA6BC,YAA7B,EAAoD;IAAA;;IAAA;MACvE;MACA,IAAIC,QAAJ;MACA,MAAM,MAAI,CAAC/B,WAAL,CACJ6B,eAAe,CAACG,QAAhB,CAAyB,YAAzB,EAAuCC,KAAvC,CAA6CC,MAA7C,CAAoD,CAApD,CADI,EAEJX,IAFI,CAEEY,IAAD,IAAWJ,QAAQ,GAAGI,IAAI,CAACJ,QAF5B,CAAN;MAIA,IAAIX,IAAI,GAAQ;QACdgB,MAAM,EAAEP,eAAe,CAACG,QAAhB,CAAyB,QAAzB,EAAmCC,KAD7B;QAEdI,KAAK,EAAEP,YAAY,CAACE,QAAb,CAAsB,OAAtB,EAA+BC,KAFxB;QAGdK,QAAQ,EAAER,YAAY,CAACE,QAAb,CAAsB,UAAtB,EAAkCC,KAH9B;QAIdM,0BAA0B,EAAE,EAJd;QAKdC,UAAU,EAAET,QALE;QAMdU,cAAc,EAAE,EANF;QAOdC,eAAe,EAAEb,eAAe,CAACG,QAAhB,CAAyB,iBAAzB,EAA4CC,KAP/C;QAQdU,MAAM,EAAE;MARM,CAAhB;MAUAC,OAAO,CAACC,GAAR,CAAYzB,IAAZ;MACA,OAAO,MAAI,CAAC1B,IAAL,CAAU2B,IAAV,CAAqB,GAAG,MAAI,CAAC1B,OAAO,gBAApC,EAAsDyB,IAAtD,CAAP;IAlBuE;EAmBxE;;EAED0B,qBAAqB;IACnB,IAAI,CAACC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAL,EAAoC;MAClC,OAAO7D,EAAE,CAAC,KAAD,CAAT,CADkC,CAChB;IACnB;;IACD,OAAO,KAAKO,IAAL,CAAUuD,GAAV,CAAoB,GAAG,KAAKtD,OAAO,QAAnC,EAA6CuD,IAA7C,CACL7D,GAAG,CAAEO,IAAD,IAAS;MACX,KAAKC,KAAL,GAAaD,IAAb;MACA,OAAO,IAAP;IACD,CAHE,CADE,CAAP;EAMD;;EAEDuD,KAAK,CAACd,KAAD,EAAgBC,QAAhB,EAAgC;IACnC,MAAMlB,IAAI,GAAG;MAAEiB,KAAF;MAASC;IAAT,CAAb;IACA,OAAO,KAAK5C,IAAL,CAAU2B,IAAV,CAA6B,GAAG,KAAK1B,OAAO,QAA5C,EAAsDyB,IAAtD,EAA4D8B,IAA5D,CACL5D,GAAG,CAAE6C,IAAD,IAAS;MACX,IAAIA,IAAI,CAACiB,EAAT,EAAa;QACXL,YAAY,CAACM,OAAb,CAAqB,OAArB,EAA8BlB,IAAI,CAACmB,KAAnC;QACA,KAAKvD,QAAL,GAAgB;UACdqC,MAAM,EAAED,IAAI,CAACC,MADC;UAEdmB,GAAG,EAAEpB,IAAI,CAACoB,GAFI;UAGdlB,KAAK,EAAEF,IAAI,CAACE;QAHE,CAAhB;MAKD;IACF,CATE,CADE,EAWLhD,GAAG,CAAE8C,IAAD,IAAUA,IAAI,CAACiB,EAAhB,CAXE,CAAP;EAaD;;EAEDI,MAAM;IACJT,YAAY,CAACU,UAAb,CAAwB,OAAxB;IACA,KAAK5D,KAAL,GAAa6D,SAAb;EACD;;EAEDC,YAAY;IACV,MAAMxC,GAAG,GAAG,GAAG,KAAKxB,OAAO,eAA3B;IACA,MAAMiE,OAAO,GAAG,IAAI1E,WAAJ,GAAkB2E,GAAlB,CACd,SADc,EAEdd,YAAY,CAACC,OAAb,CAAqB,OAArB,KAAiC,EAFnB,CAAhB;IAKA,OAAO,KAAKtD,IAAL,CAAUuD,GAAV,CAA4B9B,GAA5B,EAAiC;MAAEyC;IAAF,CAAjC,EAA8CV,IAA9C,CACL7D,GAAG,CAAE8C,IAAD,IAAS;MACXY,YAAY,CAACM,OAAb,CAAqB,OAArB,EAA8BlB,IAAI,CAACmB,KAAnC;MACA,KAAKvD,QAAL,GAAgB;QACdqC,MAAM,EAAED,IAAI,CAACC,MADC;QAEdmB,GAAG,EAAEpB,IAAI,CAACoB,GAFI;QAGdlB,KAAK,EAAEF,IAAI,CAACE;MAHE,CAAhB;MAKA,OAAOF,IAAI,CAACiB,EAAZ;IACD,CARE,CADE,EAULhE,UAAU,CAAE0E,GAAD,IAAS3E,EAAE,CAAC,KAAD,CAAZ,CAVL,CAAP;EAYD;;AA9GqB;;;mBAAXK,aAAWuE;AAAA;;;SAAXvE;EAAWwE,SAAXxE,WAAW;EAAAyE,YAFV","names":["HttpHeaders","of","catchError","map","tap","environment","AuthService","constructor","http","baseUrl","auth","_auth","usuario","_usuario","subirImagen","imagen","Promise","resolve","reject","reader","FileReader","readAsArrayBuffer","onloadend","buffer","result","imagen_array","Array","from","Uint8Array","imagen_base64","btoa","String","fromCharCode","url","body","post","toPromise","then","response","catch","error","onerror","registraUsuario","datosPersonales","inicioSesion","idImagen","controls","value","_files","resp","nombre","email","password","listaRestaurantesFavoritos","fotografia","listaOpiniones","fechaNacimiento","google","console","log","verificaAutenticacion","localStorage","getItem","get","pipe","login","ok","setItem","token","uid","logOut","removeItem","undefined","validarToken","headers","set","err","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\victo\\OneDrive\\Escritorio\\TFG\\TFG-Código\\Frontend\\src\\app\\auth\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { Auth, AuthResponse, Usuario } from '../interfaces/auth.interfaces';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private baseUrl: string = environment.baseUrl;\n  private _auth!: Auth | undefined;\n  private _usuario!: Usuario;\n\n  constructor(private http: HttpClient) {}\n\n  get auth(): Auth {\n    return { ...this._auth! };\n  }\n\n  get usuario(): Usuario {\n    return { ...this._usuario };\n  }\n\n  async subirImagen(imagen: File): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(imagen);\n      reader.onloadend = () => {\n        const buffer = reader.result as ArrayBuffer;\n        const imagen_array = Array.from(new Uint8Array(buffer));\n        const imagen_base64 = btoa(String.fromCharCode(...imagen_array));\n        const url = `${this.baseUrl}/subir-imagen`;\n        const body = { imagen: imagen_base64 };\n        this.http\n          .post(url, body)\n          .toPromise()\n          .then((response) => resolve(response))\n          .catch((error) => reject(error));\n      };\n      reader.onerror = (error) => {\n        reject(error);\n      };\n    });\n  }\n  async registraUsuario(datosPersonales: FormGroup, inicioSesion: FormGroup) {\n    // TODO: Definir correctamente los datos a enviar, comprobar modelo Usuario en bd\n    let idImagen;\n    await this.subirImagen(\n      datosPersonales.controls['fotografia'].value._files[0]\n    ).then((resp) => (idImagen = resp.idImagen));\n\n    let body: any = {\n      nombre: datosPersonales.controls['nombre'].value,\n      email: inicioSesion.controls['email'].value,\n      password: inicioSesion.controls['password'].value,\n      listaRestaurantesFavoritos: [],\n      fotografia: idImagen,\n      listaOpiniones: [],\n      fechaNacimiento: datosPersonales.controls['fechaNacimiento'].value,\n      google: false,\n    };\n    console.log(body);\n    return this.http.post<Auth>(`${this.baseUrl}/nuevo-usuario`, body);\n  }\n\n  verificaAutenticacion(): Observable<boolean> {\n    if (!localStorage.getItem('token')) {\n      return of(false); // Creamos el observable del false\n    }\n    return this.http.get<Auth>(`${this.baseUrl}/login`).pipe(\n      map((auth) => {\n        this._auth = auth;\n        return true;\n      })\n    );\n  }\n\n  login(email: string, password: string) {\n    const body = { email, password };\n    return this.http.post<AuthResponse>(`${this.baseUrl}/login`, body).pipe(\n      tap((resp) => {\n        if (resp.ok) {\n          localStorage.setItem('token', resp.token!);\n          this._usuario = {\n            nombre: resp.nombre!,\n            uid: resp.uid!,\n            email: resp.email!,\n          };\n        }\n      }),\n      map((resp) => resp.ok)\n    );\n  }\n\n  logOut() {\n    localStorage.removeItem('token');\n    this._auth = undefined;\n  }\n\n  validarToken(): Observable<boolean> {\n    const url = `${this.baseUrl}/auth/renovar`;\n    const headers = new HttpHeaders().set(\n      'x-token',\n      localStorage.getItem('token') || ''\n    );\n\n    return this.http.get<AuthResponse>(url, { headers }).pipe(\n      map((resp) => {\n        localStorage.setItem('token', resp.token!);\n        this._usuario = {\n          nombre: resp.nombre!,\n          uid: resp.uid!,\n          email: resp.email!,\n        };\n        return resp.ok;\n      }),\n      catchError((err) => of(false))\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}