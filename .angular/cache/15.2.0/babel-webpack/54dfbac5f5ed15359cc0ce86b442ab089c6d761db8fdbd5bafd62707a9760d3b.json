{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/victo/OneDrive/Escritorio/TFG/TFG-C\\xF3digo/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.baseUrl;\n  }\n  get auth() {\n    return {\n      ...this._auth\n    };\n  }\n  get usuario() {\n    return {\n      ...this._usuario\n    };\n  }\n  subirImagen(imagen) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsArrayBuffer(imagen);\n        reader.onloadend = () => {\n          const imagen_base64 = reader.readAsDataURL(imagen);\n          console.log(imagen_base64);\n          const url = `${_this.baseUrl}/subir-imagen`;\n          const body = {\n            imagen: imagen_base64\n          };\n          _this.http.post(url, body).toPromise().then(response => resolve(response)).catch(error => reject(error));\n        };\n        reader.onerror = error => {\n          reject(error);\n        };\n      });\n    })();\n  }\n  registraUsuario(datosPersonales, inicioSesion) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      let idImagen;\n      if (datosPersonales.controls['fotografia'].value !== '') {\n        yield _this2.subirImagen(datosPersonales.controls['fotografia'].value._files[0]).then(resp => idImagen = resp.idImagen);\n      } else {\n        // TODO: Asignar fotografia predeterminada\n      }\n      let anio = datosPersonales.controls['fechaNacimiento'].value.getFullYear();\n      let dia = datosPersonales.controls['fechaNacimiento'].value.getDay();\n      let mes = datosPersonales.controls['fechaNacimiento'].value.getMonth();\n      const fechaNacimientoParseada = `${anio}-${mes}-${dia}`;\n      let body = {\n        nombre: datosPersonales.controls['nombre'].value,\n        email: inicioSesion.controls['email'].value,\n        password: inicioSesion.controls['password'].value,\n        listaRestaurantesFavoritos: [],\n        fotografia: idImagen,\n        listaOpiniones: [],\n        fechaNacimiento: fechaNacimientoParseada,\n        google: false\n      };\n      return _this2.http.post(`${_this2.baseUrl}/nuevo-usuario`, body).pipe(map(resp => resp.ok));\n    })();\n  }\n  verificaAutenticacion() {\n    if (!localStorage.getItem('token')) {\n      return of(false); // Creamos el observable del false\n    }\n\n    return this.http.get(`${this.baseUrl}/login`).pipe(map(auth => {\n      this._auth = auth;\n      return true;\n    }));\n  }\n  login(email, password) {\n    const body = {\n      email,\n      password\n    };\n    return this.http.post(`${this.baseUrl}/login`, body).pipe(tap(resp => {\n      if (resp.ok) {\n        localStorage.setItem('token', resp.token);\n        this._usuario = {\n          nombre: resp.nombre,\n          uid: resp.uid,\n          email: resp.email\n        };\n      }\n    }), map(resp => resp.ok));\n  }\n  logOut() {\n    localStorage.removeItem('token');\n    this._auth = undefined;\n  }\n  validarToken() {\n    const url = `${this.baseUrl}/auth/renovar`;\n    const headers = new HttpHeaders().set('x-token', localStorage.getItem('token') || '');\n    return this.http.get(url, {\n      headers\n    }).pipe(map(resp => {\n      localStorage.setItem('token', resp.token);\n      this._usuario = {\n        nombre: resp.nombre,\n        uid: resp.uid,\n        email: resp.email\n      };\n      return resp.ok;\n    }), catchError(err => of(false)));\n  }\n  registraRestaurante(datosPersonales, datosRestaurante, carta, inicioSesion) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      let idImagen;\n      if (datosRestaurante.controls['fotografia'].value !== '') {\n        yield _this3.subirImagen(datosRestaurante.controls['fotografia'].value._files[0]).then(resp => idImagen = resp.idImagen);\n      } else {\n        // TODO: Asignar fotografia predeterminada\n        idImagen = 'Prueba';\n      }\n      const bodyCarta = _this3.construyeCarta(carta);\n      const ciudad = datosRestaurante.controls['ciudad'].value;\n      const calle = datosRestaurante.controls['calle'].value;\n      const numero = datosRestaurante.controls['numero'].value;\n      const ubicacion = yield _this3.obtenerUbicacion(ciudad, calle, numero);\n      let body = {\n        nombrePropietario: datosPersonales.controls['nombrePropietario'].value,\n        fechaNacimiento: datosPersonales.controls['fechaNacimiento'].value,\n        nombre: datosRestaurante.controls['nombre'].value,\n        ubicacion: ubicacion,\n        tematica: datosRestaurante.controls['tematica'].value,\n        horario: datosRestaurante.controls['horario'].value,\n        fotografias: idImagen,\n        carta: bodyCarta,\n        email: inicioSesion.controls['email'].value,\n        password: inicioSesion.controls['password'].value,\n        comentarios: [],\n        valoracion: 0\n      };\n      return _this3.http.post(`${_this3.baseUrl}/nuevo-restaurante`, body).pipe(map(resp => resp.ok));\n    })();\n  }\n  // Array de Arrays con valores [nombrePlato,precio,tipo]\n  construyeCarta(carta) {\n    // Filtrar por tipos y añadirlos al tipo correspondiente en el objeto bodyCarta\n    const longitud = carta.controls['platos'].value.length;\n    console.log(longitud);\n    let entrantes = [];\n    let primerosPlatos = [];\n    let segundosPlatos = [];\n    let postres = [];\n    let bebidas = [];\n    for (let index = 0; index < longitud; index++) {\n      if (carta.controls['platos'].value[index].tipo === 'Entrante') {\n        entrantes.push(carta.controls['platos'].value[index]);\n      }\n      if (carta.controls['platos'].value[index].tipo === 'Primero') {\n        primerosPlatos.push(carta.controls['platos'].value[index]);\n      }\n      if (carta.controls['platos'].value[index].tipo === 'Segundo') {\n        segundosPlatos.push(carta.controls['platos'].value[index]);\n      }\n      if (carta.controls['platos'].value[index].tipo === 'Postre') {\n        postres.push(carta.controls['platos'].value[index]);\n      }\n      if (carta.controls['platos'].value[index].tipo === 'Bebida') {\n        bebidas.push(carta.controls['platos'].value[index]);\n      }\n    }\n    const bodyCarta = {\n      entrantes: entrantes,\n      primerosPlatos: primerosPlatos,\n      segundosPlatos: segundosPlatos,\n      postres: postres,\n      bebidas: bebidas\n    };\n    return bodyCarta;\n  }\n  obtenerUbicacion(calle, ciudad, numero) {\n    return _asyncToGenerator(function* () {\n      const direccion = `${calle} ${numero}, ${ciudad}`;\n      const url = `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(direccion)}&format=json`;\n      const response = yield fetch(url);\n      const data = yield response.json();\n      if (data.length > 0) {\n        const location = data[0];\n        const latitud = location.lat;\n        const longitud = location.lon;\n        return [latitud, longitud];\n      } else {\n        throw new Error(`No se encontró la ubicación para la dirección: ${direccion}`);\n      }\n    })();\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","of","catchError","map","tap","environment","AuthService","constructor","http","baseUrl","auth","_auth","usuario","_usuario","subirImagen","imagen","Promise","resolve","reject","reader","FileReader","readAsArrayBuffer","onloadend","imagen_base64","readAsDataURL","console","log","url","body","post","toPromise","then","response","catch","error","onerror","registraUsuario","datosPersonales","inicioSesion","idImagen","controls","value","_files","resp","anio","getFullYear","dia","getDay","mes","getMonth","fechaNacimientoParseada","nombre","email","password","listaRestaurantesFavoritos","fotografia","listaOpiniones","fechaNacimiento","google","pipe","ok","verificaAutenticacion","localStorage","getItem","get","login","setItem","token","uid","logOut","removeItem","undefined","validarToken","headers","set","err","registraRestaurante","datosRestaurante","carta","bodyCarta","construyeCarta","ciudad","calle","numero","ubicacion","obtenerUbicacion","nombrePropietario","tematica","horario","fotografias","comentarios","valoracion","longitud","length","entrantes","primerosPlatos","segundosPlatos","postres","bebidas","index","tipo","push","direccion","encodeURIComponent","fetch","data","json","location","latitud","lat","lon","Error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\victo\\OneDrive\\Escritorio\\TFG\\TFG-Código\\Frontend\\src\\app\\auth\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { Auth, AuthResponse, Usuario } from '../interfaces/auth.interfaces';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private baseUrl: string = environment.baseUrl;\n  private _auth!: Auth | undefined;\n  private _usuario!: Usuario;\n\n  constructor(private http: HttpClient) {}\n\n  get auth(): Auth {\n    return { ...this._auth! };\n  }\n\n  get usuario(): Usuario {\n    return { ...this._usuario };\n  }\n\n  async subirImagen(imagen: File): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(imagen);\n      reader.onloadend = () => {\n        const imagen_base64 = reader.readAsDataURL(imagen);\n        console.log(imagen_base64);\n        const url = `${this.baseUrl}/subir-imagen`;\n        const body = { imagen: imagen_base64 };\n        this.http\n          .post(url, body)\n          .toPromise()\n          .then((response) => resolve(response))\n          .catch((error) => reject(error));\n      };\n      reader.onerror = (error) => {\n        reject(error);\n      };\n    });\n  }\n  async registraUsuario(datosPersonales: FormGroup, inicioSesion: FormGroup) {\n    let idImagen;\n    if (datosPersonales.controls['fotografia'].value !== '') {\n      await this.subirImagen(\n        datosPersonales.controls['fotografia'].value._files[0]\n      ).then((resp) => (idImagen = resp.idImagen));\n    } else {\n      // TODO: Asignar fotografia predeterminada\n    }\n\n    let anio = datosPersonales.controls['fechaNacimiento'].value.getFullYear();\n    let dia = datosPersonales.controls['fechaNacimiento'].value.getDay();\n    let mes = datosPersonales.controls['fechaNacimiento'].value.getMonth();\n    const fechaNacimientoParseada = `${anio}-${mes}-${dia}`;\n\n    let body: any = {\n      nombre: datosPersonales.controls['nombre'].value,\n      email: inicioSesion.controls['email'].value,\n      password: inicioSesion.controls['password'].value,\n      listaRestaurantesFavoritos: [],\n      fotografia: idImagen,\n      listaOpiniones: [],\n      fechaNacimiento: fechaNacimientoParseada,\n      google: false,\n    };\n\n    return this.http\n      .post<any>(`${this.baseUrl}/nuevo-usuario`, body)\n      .pipe(map((resp) => resp.ok));\n  }\n\n  verificaAutenticacion(): Observable<boolean> {\n    if (!localStorage.getItem('token')) {\n      return of(false); // Creamos el observable del false\n    }\n    return this.http.get<Auth>(`${this.baseUrl}/login`).pipe(\n      map((auth) => {\n        this._auth = auth;\n        return true;\n      })\n    );\n  }\n\n  login(email: string, password: string) {\n    const body = { email, password };\n    return this.http.post<AuthResponse>(`${this.baseUrl}/login`, body).pipe(\n      tap((resp) => {\n        if (resp.ok) {\n          localStorage.setItem('token', resp.token!);\n          this._usuario = {\n            nombre: resp.nombre!,\n            uid: resp.uid!,\n            email: resp.email!,\n          };\n        }\n      }),\n      map((resp) => resp.ok)\n    );\n  }\n\n  logOut() {\n    localStorage.removeItem('token');\n    this._auth = undefined;\n  }\n\n  validarToken(): Observable<boolean> {\n    const url = `${this.baseUrl}/auth/renovar`;\n    const headers = new HttpHeaders().set(\n      'x-token',\n      localStorage.getItem('token') || ''\n    );\n\n    return this.http.get<AuthResponse>(url, { headers }).pipe(\n      map((resp) => {\n        localStorage.setItem('token', resp.token!);\n        this._usuario = {\n          nombre: resp.nombre!,\n          uid: resp.uid!,\n          email: resp.email!,\n        };\n        return resp.ok;\n      }),\n      catchError((err) => of(false))\n    );\n  }\n\n  async registraRestaurante(\n    datosPersonales: FormGroup,\n    datosRestaurante: FormGroup,\n    carta: FormGroup,\n    inicioSesion: FormGroup\n  ) {\n    let idImagen;\n    if (datosRestaurante.controls['fotografia'].value !== '') {\n      await this.subirImagen(\n        datosRestaurante.controls['fotografia'].value._files[0]\n      ).then((resp) => (idImagen = resp.idImagen));\n    } else {\n      // TODO: Asignar fotografia predeterminada\n      idImagen = 'Prueba';\n    }\n    const bodyCarta = this.construyeCarta(carta);\n\n    const ciudad = datosRestaurante.controls['ciudad'].value;\n    const calle = datosRestaurante.controls['calle'].value;\n    const numero = datosRestaurante.controls['numero'].value;\n\n    const ubicacion = await this.obtenerUbicacion(ciudad, calle, numero);\n\n    let body: any = {\n      nombrePropietario: datosPersonales.controls['nombrePropietario'].value,\n      fechaNacimiento: datosPersonales.controls['fechaNacimiento'].value,\n      nombre: datosRestaurante.controls['nombre'].value,\n      ubicacion: ubicacion,\n      tematica: datosRestaurante.controls['tematica'].value,\n      horario: datosRestaurante.controls['horario'].value,\n      fotografias: idImagen,\n      carta: bodyCarta,\n      email: inicioSesion.controls['email'].value,\n      password: inicioSesion.controls['password'].value,\n      comentarios: [],\n      valoracion: 0,\n    };\n\n    return this.http\n      .post<any>(`${this.baseUrl}/nuevo-restaurante`, body)\n      .pipe(map((resp) => resp.ok));\n  }\n\n  // Array de Arrays con valores [nombrePlato,precio,tipo]\n  construyeCarta(carta: FormGroup) {\n    // Filtrar por tipos y añadirlos al tipo correspondiente en el objeto bodyCarta\n    const longitud = carta.controls['platos'].value.length;\n    console.log(longitud);\n    let entrantes = [];\n    let primerosPlatos = [];\n    let segundosPlatos = [];\n    let postres = [];\n    let bebidas = [];\n    for (let index = 0; index < longitud; index++) {\n      if (carta.controls['platos'].value[index].tipo === 'Entrante') {\n        entrantes.push(carta.controls['platos'].value[index]);\n      }\n      if (carta.controls['platos'].value[index].tipo === 'Primero') {\n        primerosPlatos.push(carta.controls['platos'].value[index]);\n      }\n      if (carta.controls['platos'].value[index].tipo === 'Segundo') {\n        segundosPlatos.push(carta.controls['platos'].value[index]);\n      }\n      if (carta.controls['platos'].value[index].tipo === 'Postre') {\n        postres.push(carta.controls['platos'].value[index]);\n      }\n      if (carta.controls['platos'].value[index].tipo === 'Bebida') {\n        bebidas.push(carta.controls['platos'].value[index]);\n      }\n    }\n\n    const bodyCarta = {\n      entrantes: entrantes,\n      primerosPlatos: primerosPlatos,\n      segundosPlatos: segundosPlatos,\n      postres: postres,\n      bebidas: bebidas,\n    };\n    return bodyCarta;\n  }\n\n  async obtenerUbicacion(calle: String, ciudad: String, numero: String) {\n    const direccion = `${calle} ${numero}, ${ciudad}`;\n    const url = `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(\n      direccion\n    )}&format=json`;\n\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (data.length > 0) {\n      const location = data[0];\n      const latitud = location.lat;\n      const longitud = location.lon;\n\n      return [latitud, longitud];\n    } else {\n      throw new Error(\n        `No se encontró la ubicación para la dirección: ${direccion}`\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}